plugins {
    id "io.freefair.lombok" version "6.5.1"
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.73.0'
}

version = project.mod_version
group = project.maven_group

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name "Jitpack"
        url 'https://jitpack.io'
    }
    maven {
        url "https://maven.terraformersmc.com/"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
    maven {
        name "Siphalor's Maven"
        url "https://maven.siphalor.de"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("com.gitlab.Lortseam:completeconfig:${project.completeConfig_version}")

    modImplementation "de.siphalor:${project.nbtcrafting_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = file("CHANGELOG.md")
    fromRepo = file(".")
    prependToFile = false // false will replace the file, true will prepend content
    templateContent = file('changelog.template').getText('UTF-8')
}

modrinth {
    token = localProperties["modrinth_token"]
    projectId = project.modrinth_project_id
    versionNumber = project.version
    changelog = file("CHANGELOG.md").getText("UTF-8")
    versionType = "release"
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
        required.project "completeconfig"
        required.project "cloth-config"
        optional.project "nbt-crafting"
    }
    syncBodyFrom = rootProject.file("README.md").text
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody, tasks.gitChangelogTask)

curseforge {
    curseforge_project_id
    apiKey = localProperties["curseforge_token"]
    project {
        id = project.curseforge_project_id
        changelog = file("CHANGELOG.md")
        releaseType = 'release'
        changelogType = "markdown"
        addGameVersion project.minecraft_version
        addGameVersion "Fabric"

        mainArtifact(remapJar) {
            displayName = "Passable Leaves $project.version"
            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'completeconfig'
                requiredDependency 'cloth-config'
                optionalDependency 'nbt-crafting'
            }
        }
    }
}

tasks.curseforge.dependsOn(tasks.gitChangelogTask)

